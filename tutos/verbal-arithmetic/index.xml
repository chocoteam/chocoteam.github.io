<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Choco-solver – Verbal Arithmetic</title>
    <link>https://choco-solver.org/tutos/verbal-arithmetic/</link>
    <description>Recent content in Verbal Arithmetic on Choco-solver</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 31 Jan 2020 14:24:15 +0100</lastBuildDate>
    
	  <atom:link href="https://choco-solver.org/tutos/verbal-arithmetic/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Tutos: Description</title>
      <link>https://choco-solver.org/tutos/verbal-arithmetic/description/</link>
      <pubDate>Fri, 31 Jan 2020 14:26:03 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/verbal-arithmetic/description/</guid>
      <description>
        
        
        &lt;p&gt;A &lt;strong&gt;verbal arithmetic&lt;/strong&gt; is a mathematical equation among unknown
numbers, whose digits are represented by letters (see
&lt;a href=&#34;https://en.wikipedia.org/wiki/Verbal_arithmetic&#34;&gt;wikipedia&lt;/a&gt; for more
details).&lt;/p&gt;
&lt;h2 id=&#34;input-data&#34;&gt;Input data&lt;/h2&gt;
&lt;p&gt;The equation we consider here is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    S E N D
+   M O R E
-----------
= M O N E Y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A value has to be assigned to each letter in such a way that the
equation is satisfied. Note that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each letter corresponds to a digit,&lt;/li&gt;
&lt;li&gt;a word cannot start with à 0,&lt;/li&gt;
&lt;li&gt;no two letters are assigned to the same digit.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Tutos: Mathematical model</title>
      <link>https://choco-solver.org/tutos/verbal-arithmetic/math/</link>
      <pubDate>Fri, 31 Jan 2020 14:26:10 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/verbal-arithmetic/math/</guid>
      <description>
        
        
        &lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;p&gt;We associate a variable to each letter: &lt;em&gt;s, e, n, d, m, o, r, y&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;e, n, d, o, r, y&lt;/em&gt; are defined wih a $[\![0-9]\!]$-domain,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;s, m&lt;/em&gt; are defined with a $[\![1-9]\!]$-domain.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;constraints&#34;&gt;Constraints&lt;/h2&gt;
&lt;p&gt;The first constraint to satisfy is that no two letters are assigned to
the same digit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\forall i,j \in \{s, e, n, d, m, o, r, y\}, i\ne j$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we handle the constraint &amp;ldquo;&lt;em&gt;a word cannot start with à 0&lt;/em&gt;&amp;rdquo; directly
in the variables domain, the other constraints deal with the equation
itself. There are two options, either a unique scalar product, with no
additional variables, or cut it up wrt columns.&lt;/p&gt;
&lt;h3 id=&#34;globally&#34;&gt;Globally:&lt;/h3&gt;
&lt;p&gt;$$1000\times s + 100\times e + 10\times n + 1\times d$$
$$+ 1000\times m + 100\times o + 10\times r + 1\times e$$
$$= 10000\times m + 1000\times o + 100\times n + 10\times e + 1\times y$$&lt;/p&gt;
&lt;h3 id=&#34;locally&#34;&gt;Locally&lt;/h3&gt;
&lt;p&gt;$$d + e = y + 10\times r_1$$&lt;/p&gt;
&lt;p&gt;$$r_1 + n + r = e +10\times r_2$$&lt;/p&gt;
&lt;p&gt;$$r_2 + e + o = n +10\times r_3$$&lt;/p&gt;
&lt;p&gt;$$r_3 + s + e = o + 10\times m$$&lt;/p&gt;
&lt;p&gt;where $r_1,r_2,r_3$ are $[\![0-1]\!]$-domain variables and express the
carries.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Tutos: Code</title>
      <link>https://choco-solver.org/tutos/verbal-arithmetic/code/</link>
      <pubDate>Fri, 31 Jan 2020 14:26:13 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/verbal-arithmetic/code/</guid>
      <description>
        
        
        &lt;h2 id=&#34;model-with-a-global-interpretation&#34;&gt;Model with a global interpretation&lt;/h2&gt;
&lt;p&gt;The first model is based on the global interpretation of the equation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Model model = new Model(&amp;quot;SEND+MORE=MONEY&amp;quot;);
IntVar S = model.intVar(&amp;quot;S&amp;quot;, 1, 9, false);
IntVar E = model.intVar(&amp;quot;E&amp;quot;, 0, 9, false);
IntVar N = model.intVar(&amp;quot;N&amp;quot;, 0, 9, false);
IntVar D = model.intVar(&amp;quot;D&amp;quot;, 0, 9, false);
IntVar M = model.intVar(&amp;quot;M&amp;quot;, 1, 9, false);
IntVar O = model.intVar(&amp;quot;0&amp;quot;, 0, 9, false);
IntVar R = model.intVar(&amp;quot;R&amp;quot;, 0, 9, false);
IntVar Y = model.intVar(&amp;quot;Y&amp;quot;, 0, 9, false);

model.allDifferent(new IntVar[]{S, E, N, D, M, O, R, Y}).post();

IntVar[] ALL = new IntVar[]{
    S, E, N, D,
    M, O, R, E,
    M, O, N, E, Y};
int[] COEFFS = new int[]{
    1000, 100, 10, 1,
    1000, 100, 10, 1,
    -10000, -1000, -100, -10, -1};
model.scalar(ALL, COEFFS, &amp;quot;=&amp;quot;, 0).post();

Solver solver = model.getSolver();
solver.showStatistics();
solver.showSolutions();
solver.findSolution();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The solution found is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;** Choco 3.3.3 (2015-12) : Constraint Programming Solver, Copyleft (c) 2010-2015
- Model[Model-0] features:
    Variables : 9
    Constraints : 4
    Default search strategy : no
    Completed search strategy : no
- Solution #1 found. Model[Model-0], 1 Solutions, Resolution time 0,004s, 3 Nodes (742,4 n/s), 1 Backtracks, 1 Fails, 0 Restarts
    S = 9 E = 5 N = 6 D = 7 M = 1 0 = 0 R = 8 Y = 2 .
- Complete search - 1 solution found.
    Model[Model-0]
    Solutions: 1
    Building time : 0,000s
    Resolution time : 0,008s
    Nodes: 3 (383,5 n/s)
    Backtracks: 1
    Fails: 1
    Restarts: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;alldifferent&lt;/em&gt; constraint (line 11) makes sure all letters are
distinct.&lt;/p&gt;
&lt;p&gt;Then, instead of using expressions, which tend to be too verbose, we
directly declare a scalar product and post it (lines 13-21). Thus, the
expression is not decomposed on posting (no additional variables are
introduced) and it ensures a better filtering. Alternatively, the
expression could have been post in extension, providing an even better
filtering algorithm, but at high pre-process time.&lt;/p&gt;
&lt;p&gt;Finally, we rely on the capacity of the solver to output data on console
(lines 24-25). Basic search statistics (time, nodes, etc) are reported
but also a pre-defined solution format: each variable&amp;rsquo;s name is followed
a &amp;ldquo;=&amp;rdquo; sign and the value of the variable in the solution. This avoids
getting a solution object and reads it.&lt;/p&gt;
&lt;p&gt;Another alternative would be to call solver.solve() which looks for the
first solution (if any) and stops &lt;em&gt;on it&lt;/em&gt;, that is, on a state wherein
each variable is assigned to a single value. Their value can then be
read calling S.getValue():&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;model.getSolver().showStatistics();
if (model.getSolver().solve()) {
    System.out.printf(&amp;quot;%s = %d\n&amp;quot;, S.getName(), S.getValue());
    System.out.printf(&amp;quot;%s = %d\n&amp;quot;, E.getName(), E.getValue());
    // ...
}
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Hint&lt;/h4&gt;

    Simply replace the &lt;code&gt;if&lt;/code&gt; statement by a &lt;code&gt;while&lt;/code&gt; statement to look for all solutions and print
them all. However, this problem has only one solution.

&lt;/div&gt;

&lt;h2 id=&#34;model-with-a-local-interpretation&#34;&gt;Model with a local interpretation&lt;/h2&gt;
&lt;p&gt;The second model requires to introduces 3 additional variables.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// additional variables: the carries
BoolVar[] r = model.boolVarArray(3);
// declare local equations
D.add(E).eq(Y.add(r[0].mul(10))).post();
r[0].add(N).add(R).eq(E.add(r[1].mul(10))).post();
r[1].add(E).add(O).eq(N.add(r[2].mul(10))).post();
r[2].add(S).add(M).eq(O.add(M.mul(10))).post();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing so, we increase the number of variables and constraints and
introduce some search noise. Indeed, without indication on how to
explore the search, the solver will consider all variables as decisions
ones, that is as search leader. But, we may want only to branch on
letters and ignoring other ones (basically, the carries which are
assigned by propagation.&lt;/p&gt;
&lt;p&gt;To do so, we can precise the &lt;em&gt;decision variables&lt;/em&gt; and how to branch on
it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;solver.setSearch(Search.inputOrderLBSearch(S, E, N, D, M, O, R, Y));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we consider the variables in the input order (&lt;code&gt;S&lt;/code&gt; is selected first,
then &lt;code&gt;E&lt;/code&gt;, then &lt;code&gt;N&lt;/code&gt;, &amp;hellip;) and each of them are, in turn, assigned to their
current lower bound.&lt;/p&gt;
&lt;h2 id=&#34;things-to-remember&#34;&gt;Things to remember&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There exists multiple ways to declare expressions. Specific ones,
like sum or scalar product, should be considered when modeling a
problem.&lt;/li&gt;
&lt;li&gt;Extension constraints provide a powerful filtering algorithm but may
come at a high pre-process time.&lt;/li&gt;
&lt;li&gt;The Solver enables having access to a solution by calling the
solve() method. This is also an easy way to loop over all solutions.&lt;/li&gt;
&lt;li&gt;Defining a (dedicated) search strategy is a good habit to help the
solver exploring the search space.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
