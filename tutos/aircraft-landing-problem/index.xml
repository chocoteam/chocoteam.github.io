<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Choco-solver â€“ Airplane Landing Problem</title>
    <link>https://choco-solver.org/tutos/aircraft-landing-problem/</link>
    <description>Recent content in Airplane Landing Problem on Choco-solver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 Feb 2020 13:41:10 +0100</lastBuildDate>
    
	  <atom:link href="https://choco-solver.org/tutos/aircraft-landing-problem/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Tutos: Description</title>
      <link>https://choco-solver.org/tutos/aircraft-landing-problem/description/</link>
      <pubDate>Mon, 03 Feb 2020 13:41:20 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/aircraft-landing-problem/description/</guid>
      <description>
        
        
        &lt;p&gt;Given a set of planes and runways, the objective is to minimize the
total (weighted) deviation from the target landing time for each plane.&lt;/p&gt;
&lt;p&gt;There are costs associated with landing either earlier or later than a
target landing time for each plane.&lt;/p&gt;
&lt;p&gt;Each plane has to land on one of the runways within its predetermined
time windows such that separation criteria between all pairs of planes
are satisfied.&lt;/p&gt;
&lt;p&gt;This type of problem is a large-scale optimization problem, which occurs
at busy airports where making optimal use of the bottleneck resource
(the runways) is crucial to keep the airport operating smoothly.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;http://people.brunel.ac.uk/~mastjjb/jeb/orlib/airlandinfo.html&#34;&gt;this
page&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;h2 id=&#34;input-data&#34;&gt;Input data&lt;/h2&gt;
&lt;p&gt;We consider here the following input (in java):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// number of planes
int N = 10;
// Times per plane: {earliest landing time, target landing time, latest landing time}
int[][] LT = {
    {129, 155, 559},
    {195, 258, 744},
    {89, 98, 510},
    {96, 106, 521},
    {110, 123, 555},
    {120, 135, 576},
    {124, 138, 577},
    {126, 140, 573},
    {135, 150, 591},
    {160, 180, 657}};
// penalty cost penalty cost per unit of time per plane: {for landing before target, after target}
int[][] PC = {
    {10, 10},
    {10, 10},
    {30, 30},
    {30, 30},
    {30, 30},
    {30, 30},
    {30, 30},
    {30, 30},
    {30, 30},
    {30, 30}};

// Separation time required after i lands before j can land
int[][] ST = {
    {99999, 3, 15, 15, 15, 15, 15, 15, 15, 15},
    {3, 99999, 15, 15, 15, 15, 15, 15, 15, 15},
    {15, 15, 99999, 8, 8, 8, 8, 8, 8, 8},
    {15, 15, 8, 99999, 8, 8, 8, 8, 8, 8},
    {15, 15, 8, 8, 99999, 8, 8, 8, 8, 8},
    {15, 15, 8, 8, 8, 99999, 8, 8, 8, 8},
    {15, 15, 8, 8, 8, 8, 99999, 8, 8, 8},
    {15, 15, 8, 8, 8, 8, 8, 99999, 8, 8},
    {15, 15, 8, 8, 8, 8, 8, 8,  99999, 8},
    {15, 15, 8, 8, 8, 8, 8, 8,  8, 99999}};
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Tutos: Math</title>
      <link>https://choco-solver.org/tutos/aircraft-landing-problem/math/</link>
      <pubDate>Mon, 03 Feb 2020 13:41:25 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/aircraft-landing-problem/math/</guid>
      <description>
        
        
        &lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An integer variable $\text{plane}_i$ per plane &lt;em&gt;i&lt;/em&gt; indicates its
landing time.&lt;/p&gt;
&lt;p&gt;$$\forall i \in [1,10],\, \text{plane}_i = [\![LT_{i,0},LT_{i,2}]\!]$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An integer variable $\text{earliness}_j$ per plane &lt;em&gt;i&lt;/em&gt; indicates how
early a plane lands.&lt;/p&gt;
&lt;p&gt;$$\forall i \in [1,10],\, \text{earliness}_i = [\![0,LT_{i,1} - LT_{i,0}]\!]$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An integer variable $\text{tardiness}_j$ per plane &lt;em&gt;i&lt;/em&gt; indicates how
late a plane lands.&lt;/p&gt;
&lt;p&gt;$$\forall i \in [1,10],\, \text{tardiness}_i = [\![0,LT_{i,2} - LT_{i,1}]\!]$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An integer variable $tot_{dev}$ totals all costs:&lt;/p&gt;
&lt;p&gt;$$tot_{dev} = [\![0, {+\infty})$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Remark&lt;/h4&gt;

    With the current input data, there is no need to distinguish earliness
and tardiness since penalty costs are symetric. A simple distance
between the target landing time and the real landing time is enough.

&lt;/div&gt;

&lt;h2 id=&#34;constraints&#34;&gt;Constraints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One plane per runway at a time:&lt;/p&gt;
&lt;p&gt;$$\forall i,j \in [1,10]^2,\, i\ne j, \text{plane}_{i} \ne \text{plane}_{j}$$&lt;/p&gt;
&lt;p&gt;We saw this type of constraint before, it is an &lt;em&gt;alldifferent&lt;/em&gt;
constraint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the earliness of a plane &lt;em&gt;i&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;$$\forall i \in [1,10],\, \text{earliness}_i = max(0,-\text{plane}_i + \text{LT}_{i,1})$$&lt;/p&gt;
&lt;p&gt;When the plane is on time or late, its earliness is equal to 0.
Otherwise, a positive value is computed that corresponds to the
difference between the real landing time and the target landing
time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the tardiness of a plane &lt;em&gt;i&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;$$\forall i \in [1,10],\, \text{tardiness}_i = max(0,\text{plane}_i - \text{LT}_{i,1})$$&lt;/p&gt;
&lt;p&gt;When the plane is on time or early, its tardiness is equal to 0.
Otherwise, a positive value is computed that corresponds to the
difference between the real landing time and the target landing
time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the separation time required between two planes has to be satisfied:&lt;/p&gt;
&lt;p&gt;$$\forall i,j \in [1,10]^2,\, i\ne j, (\text{plane}_{i} + \text{ST}_{i,j} \le \text{plane}_{j}) \oplus (\text{plane}_{j} + \text{ST}_{j,i} \le \text{plane}_{i})$$&lt;/p&gt;
&lt;p&gt;If plane &lt;em&gt;i&lt;/em&gt; lands before plane &lt;em&gt;j&lt;/em&gt; then plane &lt;em&gt;j&lt;/em&gt; lands at least
&lt;code&gt;ST[i][j]&lt;/code&gt; after plane &lt;em&gt;i&lt;/em&gt;. Otherwise, plane &lt;em&gt;j&lt;/em&gt; lands first and plane
&lt;em&gt;i&lt;/em&gt; waits at least &lt;code&gt;ST[j][i]&lt;/code&gt; after it to land. The two conditions
cannot hold together because of the XOR logical operator. In this
case a simple inequality constraint fits the need.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the deviation cost has then to be maintained:&lt;/p&gt;
&lt;p&gt;$$tot_{dev} = \sum_{i = 1}^{10} \text{PC}_{i,0} \cdot \text{earliness}_i + \text{PC}_{i,1} \cdot \text{tardiness}_i$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective&lt;/h2&gt;
&lt;p&gt;The objective is to find a solution that minimizes tot_dev.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Tutos: Code</title>
      <link>https://choco-solver.org/tutos/aircraft-landing-problem/code/</link>
      <pubDate>Mon, 03 Feb 2020 13:41:29 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/aircraft-landing-problem/code/</guid>
      <description>
        
        
        &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// load parameters
// ...
// A new model instance
Model model = new Model(&amp;quot;Aircraft landing&amp;quot;);
// Variables declaration
IntVar[] planes = IntStream
        .range(0, N)
        .mapToObj(i -&amp;gt; model.intVar(&amp;quot;plane #&amp;quot; + i, LT[i][0], LT[i][2], false))
        .toArray(IntVar[]::new);
IntVar[] earliness = IntStream
        .range(0, N)
        .mapToObj(i -&amp;gt; model.intVar(&amp;quot;earliness #&amp;quot; + i, 0, LT[i][1] - LT[i][0], false))
        .toArray(IntVar[]::new);
IntVar[] tardiness = IntStream
        .range(0, N)
        .mapToObj(i -&amp;gt; model.intVar(&amp;quot;tardiness #&amp;quot; + i, 0, LT[i][2] - LT[i][1], false))
        .toArray(IntVar[]::new);

IntVar tot_dev = model.intVar(&amp;quot;tot_dev&amp;quot;, 0, IntVar.MAX_INT_BOUND);

// Constraint posting
// one plane per runway at a time:
model.allDifferent(planes).post();
// for each plane &#39;i&#39;
for(int i = 0; i &amp;lt; N; i++){
    // maintain earliness
    earliness[i].eq((planes[i].neg().add(LT[i][1])).max(0)).post();
    // and tardiness
    tardiness[i].eq((planes[i].sub(LT[i][1])).max(0)).post();
    // disjunctions: &#39;i&#39; lands before &#39;j&#39; or &#39;j&#39; lands before &#39;i&#39;
    for(int j = i+1; j &amp;lt; N; j++){
        Constraint iBeforej = model.arithm(planes[i], &amp;quot;&amp;lt;=&amp;quot;, planes[j], &amp;quot;-&amp;quot;, ST[i][j]);
        Constraint jBeforei = model.arithm(planes[j], &amp;quot;&amp;lt;=&amp;quot;, planes[i], &amp;quot;-&amp;quot;, ST[j][i]);
        model.addClausesBoolNot(iBeforej.reify(), jBeforei.reify());
    }
}
// prepare coefficients of the scalar product
int[] cs = new int[N*2];
for(int i = 0 ; i &amp;lt; N; i++){
    cs[i] = PC[i][0];
    cs[i + N] = PC[i][1];
}
model.scalar(ArrayUtils.append(earliness, tardiness), cs, &amp;quot;=&amp;quot;, tot_dev).post();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that all variables could be bounded, since no constraint makes
holes in the domain. However, turning them into enumerated ones will be
required to design an efficient search strategy.&lt;/p&gt;
&lt;p&gt;The objective variable, &amp;rsquo;tot_dev&amp;rsquo; is declared with an arbitrary large
upper bound. Instead of using &lt;code&gt;Integer.MAX\_VALUE&lt;/code&gt;, we call
&lt;code&gt;IntVar.MAX\_INT\_BOUND&lt;/code&gt; a pre-defined parameter not too big to limit
overflow. A better solution would be to compute the real bounds of the
variable, based on LT and PC. In our case $[\![0,117790]\!]$ is the
smallest interval that eliminates no solution.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;alldifferent&lt;/em&gt; constraint (line 23) is redundant with disjunction
constraints (lines 31-35). But it provides stronger filtering.&lt;/p&gt;
&lt;p&gt;The declaration of the disjunction (line 34) does not require to post
the constraint. Calling method like &amp;lsquo;addClause*&amp;rsquo; add clauses to a
specific clause store which acts as specific singleton constraint. The
code can however replaced by :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;model.or(iBeforej,jBeforei).post();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In that case, the logical expression will be transformed into a sum
constraint. Yet, $\frac{N \times (N-1}{2}$ constraints will be added to
the solver.&lt;/p&gt;
&lt;h2 id=&#34;a-search-strategy&#34;&gt;A search strategy&lt;/h2&gt;
&lt;p&gt;Intuitively, a good strategy to solve the problem is to select first the
variable whom distance to the target landing time and the closest
possible landing time is the biggest. It tends to avoid letting a plane
with already late (resp. early) being even more late (resp. early).&lt;/p&gt;
&lt;p&gt;Then, for a given plane, we want to minimize the distance to the target
landing time. So we simply choose the value in its domain closest to the
target landing time.&lt;/p&gt;
&lt;p&gt;First, we map each plane with its target landing time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Map&amp;lt;IntVar, Integer&amp;gt; map =
    IntStream.range(0, N)
             .boxed()
             .collect(Collectors.toMap(i -&amp;gt; planes[i], i -&amp;gt; LT[i][1]));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, for a given plane, a function is created to look for the possible
landing time closest to the target landing time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private static int closest(IntVar var, Map&amp;lt;IntVar, Integer&amp;gt; map) {
    int target = map.get(var);
    if (var.contains(target)) {
        return target;
    } else {
        int p = var.previousValue(target);
        int n = var.nextValue(target);
        return Math.abs(target - p) &amp;lt; Math.abs(n - target) ? p : n;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that, &lt;code&gt;var.previousValue(target)&lt;/code&gt; can return &lt;code&gt;Integer.MIN\_VALUE&lt;/code&gt; which
indicates that there is no value before target in the domain of var
(same goes with &lt;code&gt;var.nextValue(target)&lt;/code&gt; and &lt;code&gt;Integer.MAX\_VALUE)&lt;/code&gt;. That&amp;rsquo;s
why the absolute difference is computed, and the minimum is returned.&lt;/p&gt;
&lt;p&gt;Finally, the search strategy is defined:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;solver.setSearch(Search.intVarSearch(
    variables -&amp;gt; Arrays.stream(variables)
          .filter(v -&amp;gt; !v.isInstantiated())
          .min((v1, v2) -&amp;gt; closest(v2, map) - closest(v1, map))
          .orElse(null),
    var -&amp;gt; closest(var, map),
    DecisionOperator.int_eq,
    planes
));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lines 2-7: non-instantiated variables are filtered and the more distant
to the target landing time is returned. Note that if all variables are
instantiated, null is expected to indicate that the strategy runs dry.
Line 8: the closest possible landing time for a given variable is
returned. Line 9: the decision is based on the assignment operator. Left
decision branch is assignment, right decision branch (refutation) is
value removal. That is why the domain of planes must be enumerated. Line
10: the scope variables is defined.&lt;/p&gt;
&lt;p&gt;The three instructions (Lines2-10) are input in
&lt;code&gt;SearchStrategyFactory.intVarSearch(VariableSelector&amp;lt;IntVar&amp;gt;,IntValueSelector,IntVar...)&lt;/code&gt; which builds in return a integer
variable search strategy.&lt;/p&gt;
&lt;h2 id=&#34;the-resolution-objective&#34;&gt;The resolution objective&lt;/h2&gt;
&lt;p&gt;The objective is to minimize &amp;rsquo;tot_dev&amp;rsquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Find a solution that minimizes &#39;tot_dev&#39;
Solution best = solver.findOptimalSolution(tot_dev, false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method attempts to find the optimal solution.&lt;/p&gt;
&lt;p&gt;If one wants to interact with each solution without using the unfold
resolution process, she/he can plug a solution monitor to the solver.
Such monitor implements an one-method interface called on each solution:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;solver.plugMonitor((IMonitorSolution) () -&amp;gt; {
    for (int i = 0; i &amp;lt; N; i++) {
        System.out.printf(&amp;quot;%s lands at %d (%d)\n&amp;quot;,
                planes[i].getName(),
                planes[i].getValue(),
                planes[i].getValue() - LT[i][1]);
    }
    System.out.printf(&amp;quot;Deviation cost: %d\n&amp;quot;, tot_dev.getValue());
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We print here the real landing time and the distance to the target
landing time for each plane and the total deviation cost.&lt;/p&gt;
&lt;h2 id=&#34;the-entire-code&#34;&gt;The entire code&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// number of planes
int N = 10;
// Times per plane:
// {earliest landing time, target landing time, latest landing time}
int[][] LT = {
        {129, 155, 559},
        {195, 258, 744},
        {89, 98, 510},
        {96, 106, 521},
        {110, 123, 555},
        {120, 135, 576},
        {124, 138, 577},
        {126, 140, 573},
        {135, 150, 591},
        {160, 180, 657}};
// penalty cost penalty cost per unit of time per plane:
// {for landing before target, after target}
int[][] PC = {
        {10, 10},
        {10, 10},
        {30, 30},
        {30, 30},
        {30, 30},
        {30, 30},
        {30, 30},
        {30, 30},
        {30, 30},
        {30, 30}};
// Separation time required after i lands before j can land
int[][] ST = {
        {99999, 3, 15, 15, 15, 15, 15, 15, 15, 15},
        {3, 99999, 15, 15, 15, 15, 15, 15, 15, 15},
        {15, 15, 99999, 8, 8, 8, 8, 8, 8, 8},
        {15, 15, 8, 99999, 8, 8, 8, 8, 8, 8},
        {15, 15, 8, 8, 99999, 8, 8, 8, 8, 8},
        {15, 15, 8, 8, 8, 99999, 8, 8, 8, 8},
        {15, 15, 8, 8, 8, 8, 99999, 8, 8, 8},
        {15, 15, 8, 8, 8, 8, 8, 999999, 8, 8},
        {15, 15, 8, 8, 8, 8, 8, 8, 99999, 8},
        {15, 15, 8, 8, 8, 8, 8, 8, 8, 99999}};

Model model = new Model(&amp;quot;Aircraft landing&amp;quot;);
// Variables declaration
IntVar[] planes = IntStream
        .range(0, N)
        .mapToObj(i -&amp;gt; model.intVar(&amp;quot;plane #&amp;quot; + i, LT[i][0], LT[i][2], false))
        .toArray(IntVar[]::new);
IntVar[] earliness = IntStream
        .range(0, N)
        .mapToObj(i -&amp;gt; model.intVar(&amp;quot;earliness #&amp;quot; + i, 0, LT[i][1] - LT[i][0], false))
        .toArray(IntVar[]::new);
IntVar[] tardiness = IntStream
        .range(0, N)
        .mapToObj(i -&amp;gt; model.intVar(&amp;quot;tardiness #&amp;quot; + i, 0, LT[i][2] - LT[i][1], false))
        .toArray(IntVar[]::new);
IntVar tot_dev = model.intVar(&amp;quot;tot_dev&amp;quot;, 0, IntVar.MAX_INT_BOUND);
// Constraint posting
// one plane per runway at a time:
model.allDifferent(planes).post();
// for each plane &#39;i&#39;
for (int i = 0; i &amp;lt; N; i++) {
    // maintain earliness
    earliness[i].eq((planes[i].neg().add(LT[i][1])).max(0)).post();
    // and tardiness
    tardiness[i].eq((planes[i].sub(LT[i][1])).max(0)).post();
    // disjunctions: &#39;i&#39; lands before &#39;j&#39; or &#39;j&#39; lands before &#39;i&#39;
    for (int j = i + 1; j &amp;lt; N; j++) {
        Constraint iBeforej = model.arithm(planes[i], &amp;quot;&amp;lt;=&amp;quot;, planes[j], &amp;quot;-&amp;quot;, ST[i][j]);
        Constraint jBeforei = model.arithm(planes[j], &amp;quot;&amp;lt;=&amp;quot;, planes[i], &amp;quot;-&amp;quot;, ST[j][i]);
        model.addClausesBoolNot(iBeforej.reify(), jBeforei.reify()); // no need to post
    }
}
// prepare coefficients of the scalar product
int[] cs = new int[N * 2];
for (int i = 0; i &amp;lt; N; i++) {
    cs[i] = PC[i][0];
    cs[i + N] = PC[i][1];
}
model.scalar(ArrayUtils.append(earliness, tardiness), cs, &amp;quot;=&amp;quot;, tot_dev).post();
// Resolution process
Solver solver = model.getSolver();
solver.plugMonitor((IMonitorSolution) () -&amp;gt; {
    for (int i = 0; i &amp;lt; N; i++) {
        System.out.printf(&amp;quot;%s lands at %d (%d)\n&amp;quot;,
                planes[i].getName(),
                planes[i].getValue(),
                planes[i].getValue() - LT[i][1]);
    }
    System.out.printf(&amp;quot;Deviation cost: %d\n&amp;quot;, tot_dev.getValue());
});
Map&amp;lt;IntVar, Integer&amp;gt; map = IntStream
        .range(0, N)
        .boxed()
        .collect(Collectors.toMap(i -&amp;gt; planes[i], i -&amp;gt; LT[i][1]));
solver.setSearch(Search.intVarSearch(
    variables -&amp;gt; Arrays.stream(variables)
          .filter(v -&amp;gt; !v.isInstantiated())
          .min((v1, v2) -&amp;gt; closest(v2, map) - closest(v1, map))
          .orElse(null),
    var -&amp;gt; closest(var, map),
    DecisionOperatorFactory.makeIntEq(),
    planes
));
solver.showShortStatistics();
solver.findOptimalSolution(tot_dev, false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The best solution found is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plane #0 lands at 165 (10)
plane #1 lands at 258 (0)
plane #2 lands at 98 (0)
plane #3 lands at 106 (0)
plane #4 lands at 118 (-5)
plane #5 lands at 134 (-1)
plane #6 lands at 126 (-12)
plane #7 lands at 142 (2)
plane #8 lands at 150 (0)
plane #9 lands at 180 (0)
Deviation cost: 700
Model[Aircraft landing], 7 Solutions, Minimize tot_dev = 700, Resolution time 0,326s, 906 Nodes (2Â 781,1 n/s), 1756 Backtracks, 883 Fails, 0 Restarts
Model[Aircraft landing], 7 Solutions, Minimize tot_dev = 700, Resolution time 12,608s, 246096 Nodes (19Â 519,6 n/s), 492179 Backtracks, 246083 Fails, 0 Restarts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second to last line of the console sums up the resolution statistics
when the last solution was found :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this is the twelfth solution, its cost is 700 (&amp;rsquo;tot_dev&amp;rsquo;), it took
326ms and 906 nodes were opened to find it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last line of the console sums up to resolution statistics of the
entire resolution, including optimality proof:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;7 solutions were found, 12,608s seconds and 246096 nodes were needed
to explore the entire search space and prove the optimality of the last
solution found.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the plane selection is turned upside down (less late (early) plane is
selected first) the resolution statistics change a bit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Model[Aircraft landing], 12 Solutions, Minimize tot_dev = 700, Resolution time 0,514s, 2147 Nodes (4Â 180,8 n/s), 4222 Backtracks, 2119 Fails, 0 Restarts
Model[Aircraft landing], 12 Solutions, Minimize tot_dev = 700, Resolution time 4,505s, 71596 Nodes (15Â 892,4 n/s), 143169 Backtracks, 71573 Fails, 0 Restarts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that more intermediate solutions were found (12 vs. 7) and
that it took more time to find the best solution (514ms and 2147 nodes
vs. 326ms and 906 nodes) but the optimality is proven faster (4,505s and
71596 nodes vs. 12,608s and 246096 nodes).&lt;/p&gt;
&lt;p&gt;This demonstrates that a strategy that is quick to produce the best
solution may be unable to prove its optimality efficiently.&lt;/p&gt;
&lt;h2 id=&#34;things-to-remember&#34;&gt;Things to remember&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A good estimation of the variables domain is important to limit
overflow and reduce the induce search space.&lt;/li&gt;
&lt;li&gt;Redundant constraints can reduce the search space too, but can also
slow down the propagation loop. Their benefit should be evaluated.&lt;/li&gt;
&lt;li&gt;Most of the time adding clauses instead of logical constraints
limits the memory footprint and provide an equivalent filtering
quality.&lt;/li&gt;
&lt;li&gt;A decision, result of a search strategy, is a combination of a
variable, a value and an operator.&lt;/li&gt;
&lt;li&gt;Monitors can be plugged to the solver to interact with the search,
specifically on solution.&lt;/li&gt;
&lt;li&gt;Accurate search strategy design is the key to efficient resolution.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
