<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Choco-solver â€“ Tutorials</title>
    <link>https://choco-solver.org/tutos/</link>
    <description>Recent content in Tutorials on Choco-solver</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://choco-solver.org/tutos/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Tutos: Project Euler, Problem 103</title>
      <link>https://choco-solver.org/tutos/other-examples/euler-103/</link>
      <pubDate>Tue, 02 Feb 2021 09:21:16 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/other-examples/euler-103/</guid>
      <description>
        
        
        &lt;p&gt;Thanks to &lt;a href=&#34;https://www.univ-nantes.fr/mathieu-vavrille&#34;&gt;Mathieu Vavrille&lt;/a&gt; for his modelling of &lt;a href=&#34;https://projecteuler.net/problem=103&#34;&gt;problem 103 of the Euler project&lt;/a&gt;, &amp;ldquo;Special subset sums: optimum&amp;rdquo;, using Constraint Programming and Choco.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Euler {

  public static void main(final String[] args) {
    System.out.println(euler103());
  }

  /** Euler 103, Special subset sums */
  private static String euler103() {
    int n = 7;
    int bound = 40;
    List&amp;lt;Set&amp;lt;Integer&amp;gt;&amp;gt; allPartitions = partitions(n-1); // Enumerates all the partitions of {0, ..., n-1}
    Model model = new Model();
    IntVar[] mainSet = model.intVarArray(&amp;quot;set&amp;quot;, n, 0, 100); // Numbers in the set
    for (int i = 0; i &amp;lt; n-1; i++) {
      mainSet[i].lt(mainSet[i+1]).post(); // Order the numbers in the set
    }
    IntVar[] partitionSums = model.intVarArray(&amp;quot;partition&amp;quot;, allPartitions.size(), 0, n*bound); // Create a variable representing the sum of each subset
    for (int i = 0; i &amp;lt; partitionSums.length; i++)
      model.sum(allPartitions.get(i).stream()
                .map(id -&amp;gt; mainSet[id])
                .toArray(IntVar[]::new), &amp;quot;=&amp;quot;, partitionSums[i]).post();
  for (int i = 0; i &amp;lt; allPartitions.size(); i++)
      for (int j = i+1; j &amp;lt; allPartitions.size(); j++)
        if (Collections.disjoint(allPartitions.get(i), allPartitions.get(j))) { // Enforce the constraint for distinct subsets
          if (allPartitions.get(i).size() &amp;gt; allPartitions.get(j).size())
            partitionSums[i].gt(partitionSums[j]).post();
          else if (allPartitions.get(i).size() == allPartitions.get(j).size())
            partitionSums[i].ne(partitionSums[j]).post();
          else if (allPartitions.get(i).size() &amp;lt; allPartitions.get(j).size())
            partitionSums[i].lt(partitionSums[j]).post();
        }
  model.setObjective(false, partitionSums[partitionSums.length-1]); // Objective is the sum of the variables in the set
  Solver solver = model.getSolver();
  String result = &amp;quot;&amp;quot;;
  while (solver.solve()) { // Solve
    result = Arrays.stream(mainSet)
      .map(var -&amp;gt; Integer.toString(var.getValue()))
      .collect(Collectors.joining());
  }
  return result;
  }
  
  private static List&amp;lt;Set&amp;lt;Integer&amp;gt;&amp;gt; partitions(final int n) {
    if (n == 0) {
      List&amp;lt;Set&amp;lt;Integer&amp;gt;&amp;gt; parts = new ArrayList&amp;lt;Set&amp;lt;Integer&amp;gt;&amp;gt;();
      parts.add(new HashSet&amp;lt;Integer&amp;gt;());
      parts.add(Set.of(0));
      return parts;
    }
    List&amp;lt;Set&amp;lt;Integer&amp;gt;&amp;gt; smaller = partitions(n-1);
    for (int i = 0; i &amp;lt; 1&amp;lt;&amp;lt;n; i++) {
      Set&amp;lt;Integer&amp;gt; currentAdded = new HashSet&amp;lt;Integer&amp;gt;(smaller.get(i));
      currentAdded.add(n);
      smaller.add(currentAdded);
    }
    return smaller;
  }
  
}
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
  </channel>
</rss>
