<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Choco-solver – Golomb Ruler</title>
    <link>https://choco-solver.org/tutos/golomb-ruler/</link>
    <description>Recent content in Golomb Ruler on Choco-solver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 05 Feb 2020 16:00:58 +0100</lastBuildDate>
    
	  <atom:link href="https://choco-solver.org/tutos/golomb-ruler/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Tutos: Description</title>
      <link>https://choco-solver.org/tutos/golomb-ruler/description/</link>
      <pubDate>Wed, 05 Feb 2020 16:01:05 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/golomb-ruler/description/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Golomb_ruler&#34;&gt;Wikipedia&lt;/a&gt; told us that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Golomb ruler&lt;/strong&gt; is a set of marks at integer positions along an
imaginary ruler such that no two pairs of marks are the same distance
apart. The number of marks on the ruler is its order, and the largest
distance between two of its marks is its length. The objective is to
find optimal (minimum length) or near optimal rulers. Translation and
reflection of a Golomb ruler are considered trivial, so the smallest
mark is customarily put at 0 and the next mark at the smaller of its
two possible values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;input-data&#34;&gt;Input data&lt;/h2&gt;
&lt;p&gt;Only the order &lt;em&gt;m&lt;/em&gt; is given as input data.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Tutos: Math</title>
      <link>https://choco-solver.org/tutos/golomb-ruler/math/</link>
      <pubDate>Wed, 05 Feb 2020 16:01:10 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/golomb-ruler/math/</guid>
      <description>
        
        
        &lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An integer variable $\text{tick}_i$ per mark &lt;em&gt;i&lt;/em&gt; indicates its
position.&lt;/p&gt;
&lt;p&gt;$$\forall i \in [1,m], \text{tick}_i = [\![0,9999]\!]$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An integer variable $\text{diff}_{i,j}$ per couple of marks $i,j$
($i &amp;lt; j$) indicates distance between the two marks.&lt;/p&gt;
&lt;p&gt;$$\forall i,j \in [1,m], i &amp;lt; j, \text{diff}_{i,j} = [\![0,9999]\!]$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;constraints&#34;&gt;Constraints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Maks are ordered :&lt;/p&gt;
&lt;p&gt;$$\forall i \in [2,m], \text{tick}_{i-1} &amp;lt; \text{tick}_i$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distance between two distinct marks :&lt;/p&gt;
&lt;p&gt;$$\forall i,j \in [1,m], i &amp;lt; j, \text{diff}_{i,j} = \text{tick}_j - \text{tick}_i$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No two pairs of marks are the same distance apart&lt;/p&gt;
&lt;p&gt;$$\forall i,j \in [1,m], i \ne j, \text{tick}_{i} \ne \text{tick}_{j}$$&lt;/p&gt;
&lt;p&gt;We saw this type of constraint before, it is an &lt;em&gt;alldifferent&lt;/em&gt;
constraint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first mark can be set to &lt;code&gt;0&lt;/code&gt;:
$$\text{tick}_0 = 0$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those variables and constraints are sufficient to define the problem.
However, this initial model can be improved by adding &lt;em&gt;redundant
constraints&lt;/em&gt; and by &lt;em&gt;breaking symmetries&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;redundant-constraints&#34;&gt;Redundant constraints&lt;/h3&gt;
&lt;p&gt;These types of constraints are not required to find solutions, they are
implied by the other constraints of the model. Thus, their role is to
bring more filtering and to possibly detect infeasible combinations
earlier in the search.&lt;/p&gt;
&lt;p&gt;The following reasoning is based on the fact that:&lt;/p&gt;
&lt;p&gt;$$\forall i,j \in [1,m], i &amp;lt; j, \text{diff}_{i,j} = \text{diff}_{i,i+1} + \ldots + \text{diff}_{j-1,j}$$&lt;/p&gt;
&lt;p&gt;Because all distances must be different, we can estimate the minimal sum
of distances as a sum of &lt;em&gt;j-i&lt;/em&gt; different positive numbers.&lt;/p&gt;
&lt;p&gt;$$\forall i,j \in [1,m], i &amp;lt; j, \text{diff}_{i,j} \geq \frac{(j-i) * (j-i+1)}{2}$$&lt;/p&gt;
&lt;p&gt;Moreover, remember that&lt;/p&gt;
&lt;p&gt;$$\text{diff}_{1,m} = \text{tick}_{m} - \text{tick}_1$$&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;$$\text{diff}_{1,m} = \text{diff}_{1,2} + \ldots + \text{diff}_{i,i+1} + \ldots + \text{diff}_{m-1,m}$$&lt;/p&gt;
&lt;p&gt;Thus, since $\text{tick}_1$ is equal to 0, we deduce that:&lt;/p&gt;
&lt;p&gt;$$\text{tick}_{m} = \text{diff}_{1,2} + \ldots + \text{diff}_{i,i+1} + \ldots + \text{diff}_{m-1,m}$$&lt;/p&gt;
&lt;p&gt;There are &lt;em&gt;m-1-j+i&lt;/em&gt; different numbers so the upper for
$\text{diff}_{i,j}$ can be defined as:&lt;/p&gt;
&lt;p&gt;$$\forall i,j \in [1,m], i &amp;lt; j, \text{diff}_{i,j} \leq \text{tick}_m - \frac{(m - 1 - j + i) * (m - j + i)}{2}$$&lt;/p&gt;
&lt;p&gt;To go into details, please read &lt;a href=&#34;https://www.researchgate.net/publication/221644589_Effective_Modeling_with_Constraints&#34;&gt;Barták, &amp;ldquo;Effective modeling with
constraints&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;symmetry-breaking-constraints&#34;&gt;Symmetry-breaking constraints&lt;/h3&gt;
&lt;p&gt;These types of constraints aims at breaking symmetries and reducing the
search space size. Indeed, they avoid finding new solutions that are
symmetric to previously found ones.&lt;/p&gt;
&lt;p&gt;In a Golomb ruler, an easy way to break symmetries is to define an order
between the first and the last distances:&lt;/p&gt;
&lt;p&gt;$$\text{diff}_{0,1} &amp;lt; \text{diff}_{m-1,m}$$&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective&lt;/h2&gt;
&lt;p&gt;The objective is to find a solution that minimizes the position of the
last mark $\text{tick}_m$.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Tutos: Code</title>
      <link>https://choco-solver.org/tutos/golomb-ruler/code/</link>
      <pubDate>Wed, 05 Feb 2020 16:01:13 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/golomb-ruler/code/</guid>
      <description>
        
        
        &lt;h2 id=&#34;a-model&#34;&gt;A model&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;int m = 10;
// A new model instance
Model model = new Model(&amp;quot;Golomb ruler&amp;quot;);

// VARIABLES
// set of marks that should be put on the ruler
IntVar[] ticks = model.intVarArray(&amp;quot;a&amp;quot;, m, 0, 999, false);
// set of distances between two distinct marks
IntVar[] diffs = model.intVarArray(&amp;quot;d&amp;quot;, (m * (m - 1)) / 2, 0, 999, false);

// CONSTRAINTS
// the first mark is set to 0
model.arithm(ticks[0], &amp;quot;=&amp;quot;, 0).post();

for (int i = 0, k = 0 ; i &amp;lt; m - 1; i++) {
    // // the mark variables are ordered
    model.arithm(ticks[i + 1], &amp;quot;&amp;gt;&amp;quot;, ticks[i]).post();
    for (int j = i + 1; j &amp;lt; m; j++, k++) {
        // declare the distance constraint between two distinct marks
        model.scalar(new IntVar[]{ticks[j], ticks[i]}, new int[]{1, -1}, &amp;quot;=&amp;quot;, diffs[k]).post();
        // redundant constraints on bounds of diffs[k]
        model.arithm(diffs[k], &amp;quot;&amp;gt;=&amp;quot;, (j - i) * (j - i + 1) / 2).post();
        model.arithm(diffs[k], &amp;quot;&amp;lt;=&amp;quot;, ticks[m - 1], &amp;quot;-&amp;quot;, ((m - 1 - j + i) * (m - j + i)) / 2).post();
    }
}
// all distances must be distinct
model.allDifferent(diffs, &amp;quot;BC&amp;quot;).post();
//symmetry-breaking constraints
model.arithm(diffs[0], &amp;quot;&amp;lt;&amp;quot;, diffs[diffs.length - 1]).post();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;a-search-strategy&#34;&gt;A search strategy&lt;/h2&gt;
&lt;p&gt;A simple but efficient strategy to guide the search is to select the
mark variable in lexicographical order and to instantiate each of them
to its lower bound.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Solver solver = model.getSolver();
solver.setSearch(Search.inputOrderLBSearch(ticks));
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;the-resolution-objective&#34;&gt;The resolution objective&lt;/h2&gt;
&lt;p&gt;The objective is to minimize the last mark.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Find a solution that minimizes the last mark
solver.findOptimalSolution(ticks[m - 1], false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method attempts to find the optimal solution.&lt;/p&gt;
&lt;h2 id=&#34;the-entire-code&#34;&gt;The entire code&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;int m = 10;
// A new model instance
Model model = new Model(&amp;quot;Golomb ruler&amp;quot;);

// VARIABLES
// set of marks that should be put on the ruler
IntVar[] ticks = ticks = model.intVarArray(&amp;quot;a&amp;quot;, m, 0, 999, false);
// set of distances between two distinct marks
IntVar[] diffs = model.intVarArray(&amp;quot;d&amp;quot;, (m * (m - 1)) / 2, 0, 999, false);

// CONSTRAINTS
// the first mark is set to 0
model.arithm(ticks[0], &amp;quot;=&amp;quot;, 0).post();

for (int i = 0, k = 0 ; i &amp;lt; m - 1; i++) {
    // // the mark variables are ordered
    model.arithm(ticks[i + 1], &amp;quot;&amp;gt;&amp;quot;, ticks[i]).post();
    for (int j = i + 1; j &amp;lt; m; j++, k++) {
        // declare the distance constraint between two distinct marks
        model.scalar(new IntVar[]{ticks[j], ticks[i]}, new int[]{1, -1}, &amp;quot;=&amp;quot;, diffs[k]).post();
        // redundant constraints on bounds of diffs[k]
        model.arithm(diffs[k], &amp;quot;&amp;gt;=&amp;quot;, (j - i) * (j - i + 1) / 2).post();
        model.arithm(diffs[k], &amp;quot;&amp;lt;=&amp;quot;, ticks[m - 1], &amp;quot;-&amp;quot;, ((m - 1 - j + i) * (m - j + i)) / 2).post();
    }
}
// all distances must be distinct
model.allDifferent(diffs, &amp;quot;BC&amp;quot;).post();
//symmetry-breaking constraints
model.arithm(diffs[0], &amp;quot;&amp;lt;&amp;quot;, diffs[diffs.length - 1]).post();

Solver solver = model.getSolver();
solver.setSearch(Search.inputOrderLBSearch(ticks));
// show resolution statistics
solver.showShortStatistics();
// Find a solution that minimizes the last mark
solver.findOptimalSolution(ticks[m - 1], false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The trace of the execution is roughly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Model[Golomb ruler], 1 Solutions, MINIMIZE a[9] = 80, Resolution time 0,017s, 10 Nodes (593,7 n/s), 0 Backtracks, 0 Fails, 0 Restarts
Model[Golomb ruler], 2 Solutions, MINIMIZE a[9] = 75, Resolution time 0,026s, 18 Nodes (696,8 n/s), 14 Backtracks, 7 Fails, 0 Restarts
Model[Golomb ruler], 3 Solutions, MINIMIZE a[9] = 73, Resolution time 0,032s, 30 Nodes (949,9 n/s), 36 Backtracks, 17 Fails, 0 Restarts
Model[Golomb ruler], 4 Solutions, MINIMIZE a[9] = 72, Resolution time 0,040s, 53 Nodes (1 324,0 n/s), 80 Backtracks, 40 Fails, 0 Restarts
Model[Golomb ruler], 5 Solutions, MINIMIZE a[9] = 70, Resolution time 0,054s, 95 Nodes (1 773,2 n/s), 162 Backtracks, 79 Fails, 0 Restarts
Model[Golomb ruler], 6 Solutions, MINIMIZE a[9] = 68, Resolution time 0,065s, 161 Nodes (2 487,9 n/s), 292 Backtracks, 144 Fails, 0 Restarts
Model[Golomb ruler], 7 Solutions, MINIMIZE a[9] = 66, Resolution time 0,082s, 288 Nodes (3 529,9 n/s), 546 Backtracks, 269 Fails, 0 Restarts
Model[Golomb ruler], 8 Solutions, MINIMIZE a[9] = 62, Resolution time 0,092s, 374 Nodes (4 075,8 n/s), 712 Backtracks, 353 Fails, 0 Restarts
Model[Golomb ruler], 9 Solutions, MINIMIZE a[9] = 60, Resolution time 0,210s, 1354 Nodes (6 435,1 n/s), 2670 Backtracks, 1331 Fails, 0 Restarts
Model[Golomb ruler], 10 Solutions, MINIMIZE a[9] = 55, Resolution time 0,531s, 7997 Nodes (15 050,6 n/s), 15951 Backtracks, 7972 Fails, 0 Restarts
Model[Golomb ruler], 10 Solutions, MINIMIZE a[9] = 55, Resolution time 0,940s, 15981 Nodes (16 999,3 n/s), 31943 Backtracks, 15962 Fails, 0 Restarts
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;things-to-remember&#34;&gt;Things to remember&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;adding redundant constraints is about reinforcing the propagation
and attempting to detect earlier impossible combinations&lt;/li&gt;
&lt;li&gt;adding symmetry-breaking constraint avoid finding new solutions that
are symmetric to previously found ones.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
