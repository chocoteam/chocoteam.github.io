<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Choco-solver â€“ Warehouse Location Problem</title>
    <link>https://choco-solver.org/tutos/warehouse-location-problem/</link>
    <description>Recent content in Warehouse Location Problem on Choco-solver</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 03 Feb 2020 13:25:31 +0100</lastBuildDate>
    
	  <atom:link href="https://choco-solver.org/tutos/warehouse-location-problem/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Tutos: Description</title>
      <link>https://choco-solver.org/tutos/warehouse-location-problem/description/</link>
      <pubDate>Mon, 03 Feb 2020 13:26:51 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/warehouse-location-problem/description/</guid>
      <description>
        
        
        &lt;p&gt;In the Warehouse Location problem (WLP), a company considers opening
warehouses at some candidate locations in order to supply its existing
stores.&lt;/p&gt;
&lt;p&gt;Each possible warehouse has the same maintenance cost, and a capacity
designating the maximum number of stores that it can supply.&lt;/p&gt;
&lt;p&gt;Each store must be supplied by exactly one open warehouse. The supply
cost to a store depends on the warehouse.&lt;/p&gt;
&lt;p&gt;The objective is to determine which warehouses to open, and which of
these warehouses should supply the various stores, such that the sum of
the maintenance and supply costs is minimized.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;http://csplib.org/Problems/prob034/&#34;&gt;this page&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&#34;input-data&#34;&gt;Input data&lt;/h2&gt;
&lt;p&gt;We consider here the following input (in java):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// number of warehouses
int W = 5;
// number of stores
int S = 10;
// maintenance cost
int C = 30;
// capacity of each warehouse
int[] K = new int[]{1, 4, 2, 1, 3};
// matrix of supply costs, store x warehouse
int[][] P = new int[][]{
    {20, 24, 11, 25, 30},
    {28, 27, 82, 83, 74},
    {74, 97, 71, 96, 70},
    {2, 55, 73, 69, 61},
    {46, 96, 59, 83, 4},
    {42, 22, 29, 67, 59},
    {1, 5, 73, 59, 56},
    {10, 73, 13, 43, 96},
    {93, 35, 63, 85, 46},
    {47, 65, 55, 71, 95}};
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Tutos: Math</title>
      <link>https://choco-solver.org/tutos/warehouse-location-problem/math/</link>
      <pubDate>Mon, 03 Feb 2020 13:27:42 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/warehouse-location-problem/math/</guid>
      <description>
        
        
        &lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A boolean variable $\text{open}_i$ per warehouse &lt;em&gt;i&lt;/em&gt; is needed, set to &lt;code&gt;true&lt;/code&gt; if the corresponding warehouse is open, &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;p&gt;$$\forall i \in [1,5],\, \text{open}_i = \{0,1\}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An integer variable $\text{supplier}_j$ per store &lt;em&gt;j&lt;/em&gt; is needed, it
indicates which warehouse supplies it.&lt;/p&gt;
&lt;p&gt;$$\forall j \in [1,10],\, \text{supplier}_j = [\![1,5]\!]$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An integer variable $\text{cost}_j$ per store &lt;em&gt;j&lt;/em&gt; is needed too, it
stores the cost of being supplied by a warehouse (the range is
deduced from the matrix P).&lt;/p&gt;
&lt;p&gt;$$\forall j \in [1,10],\, \text{cost}_j = [\![1, 96]\!]$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An integer variable $tot_cost$ totals all costs:&lt;/p&gt;
&lt;p&gt;$$tot_{cost} = [\![1, {+\infty})$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;constraints&#34;&gt;Constraints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if a warehouse &lt;em&gt;i&lt;/em&gt; supplies a store &lt;em&gt;j&lt;/em&gt;, then, the warehouse is
open:&lt;/p&gt;
&lt;p&gt;$$\forall j \in [1,10], \text{open}_{\text{supplier}_j} = 1$$&lt;/p&gt;
&lt;p&gt;Here $\text{supplier}_j$ defines the index the array $\text{open}$
to be valuated to 1. This is a encoded with an element constraint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if a warehouse &lt;em&gt;i&lt;/em&gt; supplies a store &lt;em&gt;j&lt;/em&gt;, it is related to a specific
cost:&lt;/p&gt;
&lt;p&gt;$$\forall j \in [1,10], P_{j,\text{supplier}_{j}} = \text{cost}_j$$&lt;/p&gt;
&lt;p&gt;Here again, an element constraint is used to bind the supplier and
the supply cost matrix to the cost of supplying a store.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the maximum number of stores a warehouse &lt;em&gt;i&lt;/em&gt; can supply is limited
to $K_i$:&lt;/p&gt;
&lt;p&gt;$$\forall i \in [1,5], \sum_{j = 1}^{10} (\text{supplier}_j == i) = \text{occ}_i$$
$$\forall i \in [1,5], \text{occ}_i \leq K_i$$
$$\forall i \in [1,5], \text{occ}_i \geq \text{open}_i$$&lt;/p&gt;
&lt;p&gt;The first constraint counts the number of occurrences of the value
&lt;em&gt;i&lt;/em&gt; in the array supplier and stores the result $\text{occ}_i$
variable. This variable is then constrained to be less than or equal
to $K_i$, to ensure the capacity is satisfied, but also to be
greater or equal to $\text{open}_i$ to better propagation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the assignment cost has then to be maintained, including fixed costs
and supplying costs:&lt;/p&gt;
&lt;p&gt;$$tot_{cost} = \sum_{i = 1}^{5} 30 \cdot \text{open}_i + \sum_{j = 1}^{10} \text{cost}_j$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective&lt;/h2&gt;
&lt;p&gt;The objective is not to simply find a solution but one that minimizes
$tot_{cost}$.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Tutos: Code</title>
      <link>https://choco-solver.org/tutos/warehouse-location-problem/code/</link>
      <pubDate>Mon, 03 Feb 2020 13:35:26 +0100</pubDate>
      
      <guid>https://choco-solver.org/tutos/warehouse-location-problem/code/</guid>
      <description>
        
        
        &lt;h2 id=&#34;a-model&#34;&gt;A model&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// load parameters
// ...
// A new model instance
Model model = new Model(&amp;quot;WarehouseLocation&amp;quot;);

// VARIABLES
// a warehouse is either open or closed
BoolVar[] open = model.boolVarArray(&amp;quot;o&amp;quot;, W);
// which warehouse supplies a store
IntVar[] supplier = model.intVarArray(&amp;quot;supplier&amp;quot;, S, 1, W, false);
// supplying cost per store
IntVar[] cost = model.intVarArray(&amp;quot;cost&amp;quot;, S, 1, 96, true);
// Total of all costs
IntVar tot_cost = model.intVar(&amp;quot;C&amp;quot;, 0, 99999, true);

// CONSTRAINTS
for (int j = 0; j &amp;lt; S; j++) {
    // a warehouse is &#39;open&#39;, if it supplies to a store
    model.element(model.intVar(1), open, supplier[j], 1).post();
    // Compute &#39;cost&#39; for each store
    model.element(cost[j], P[j], supplier[j], 1).post();
}
for (int i = 0; i &amp;lt; W; i++) {
    // additional variable &#39;occ&#39; is created on the fly
    // its domain includes the constraint on capacity
    IntVar occ = model.intVar(&amp;quot;occur_&amp;quot; + i, 0, K[i], true);
    // for-loop starts at 0, warehouse index starts at 1
    // =&amp;gt; we count occurrences of (i+1) in &#39;supplier&#39;
    model.count(i+1, supplier, occ).post();
    // redundant link between &#39;occ&#39; and &#39;open&#39; for better propagation
    occ.ge(open[i]).post();
}
// Prepare the constraint that maintains &#39;tot_cost&#39;
int[] coeffs = new int[W + S];
Arrays.fill(coeffs, 0, W, C);
Arrays.fill(coeffs, W, W + S, 1);
// then post it
model.scalar(ArrayUtils.append(open, cost), coeffs, &amp;quot;=&amp;quot;, tot_cost).post();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last parameter of the element constraints (line 19 and 21) indicates
an offset. It enables to adapt the index range wrt to the domain of the
variable: here supplier variables lower bound is 1. But, open array
index starts at 0 and an offset is needed to match supplier with open
array. In other words, first &lt;em&gt;element&lt;/em&gt; constraint states that
$open[supplier[s] - o] = 1$ where $o$ is set to 1.&lt;/p&gt;
&lt;h2 id=&#34;a-search-strategy&#34;&gt;A search strategy&lt;/h2&gt;
&lt;p&gt;Since the problem is hard to solve, defining an adapted strategy is a
key to success. Among all declared variables, the ones that holds the
problem are &amp;lsquo;open&amp;rsquo; and &amp;lsquo;supplier&amp;rsquo;: deciding on these variables has a
great effect on the size of the search space reduction. They are named
after that effect as &lt;em&gt;decision variables&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A good strategy for that problem is to select, among decisions
variables, the one with the smallest domain first. If two variables or
more have the smallest domain size, &lt;em&gt;ties&lt;/em&gt; are broken randomly. Then,
the value in the middle of the domain of the selected variable is
assigned to it, with a floor rounding policy (the closest value greater
or equal to the middle value is returned).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Solver solver = model.getSolver();
solver.setSearch(Search.intVarSearch(
    new VariableSelectorWithTies&amp;lt;&amp;gt;(
        new FirstFail(model),
        new Smallest()),
    new IntDomainMiddle(false),
    ArrayUtils.append(supplier, cost, open))
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;the-resolution-objective&#34;&gt;The resolution objective&lt;/h2&gt;
&lt;p&gt;The objective is to minimize &amp;rsquo;tot_cost&amp;rsquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Find a solution that minimizes &#39;tot_cost&#39;
Solution best = solver.findOptimalSolution(tot_cost, false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method attempts to find the optimal solution.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Hint&lt;/h4&gt;

    Finding an optimal solution goes like this: anytime a solution is
found, a &lt;em&gt;cut&lt;/em&gt; is posted on the objective variable to forbid worst or
same value solutions to be found. When a cut is so strong that no
better solution is found, the last one is the optimal one (if we
consider that no search limits was defined). The cut process is
entirely managed by the solver.

&lt;/div&gt;

&lt;p&gt;Alternatively, the search loop can be unfold.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;model.setObjective(false, tot_cost);
while(solver.solve()){
    // do something on solution
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The objective variable and criteria should be declared, but there is no
need to post the cut manually, the solver manages this. When the unfold
search process is used, one can modify the way the cut is handled:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Walking cut: allow same value solutions
solver.getObjectiveManager().&amp;lt;Integer&amp;gt;setCutComputer(obj -&amp;gt; obj);
model.setObjective(false, tot_cost);
while(solver.solve()){
    // do something on solution
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfold search process allows you to execute code on solution easily.&lt;/p&gt;
&lt;p&gt;One can add a limit to the resolution process. For example, a 10
second-limit can be defined like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;solver.limitTime(&amp;quot;10s&amp;quot;);
// then run the resolution
Solution best = solver.findOptimalSolution(tot_cost, false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The search should be configured &lt;strong&gt;before&lt;/strong&gt; being called. There can be
multiple limitations, in that case, the first reached stops the search.&lt;/p&gt;
&lt;h2 id=&#34;pretty-solution-output&#34;&gt;Pretty solution output&lt;/h2&gt;
&lt;p&gt;We can define a function that prints any solutions in a pretty way.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void prettyPrint(Model model, IntVar[] open, int W, IntVar[] supplier, int S, IntVar tot_cost) {
    StringBuilder st = new StringBuilder();
    st.append(&amp;quot;Solution #&amp;quot;).append(model.getSolver().getSolutionCount()).append(&amp;quot;\n&amp;quot;);
    for (int i = 0; i &amp;lt; W; i++) {
        if (open[i].getValue() &amp;gt; 0) {
            st.append(String.format(&amp;quot;\tWarehouse %d supplies customers : &amp;quot;, (i + 1)));
            for (int j = 0; j &amp;lt; S; j++) {
                if (supplier[j].getValue() == (i + 1)) {
                    st.append(String.format(&amp;quot;%d &amp;quot;, (j + 1)));
                }
            }
            st.append(&amp;quot;\n&amp;quot;);
        }
    }
    st.append(&amp;quot;\tTotal C: &amp;quot;).append(tot_cost.getValue());
    System.out.println(st.toString());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling this method is made easy with the unfold resolution instruction.&lt;/p&gt;
&lt;h2 id=&#34;the-entire-code&#34;&gt;The entire code&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// load parameters
// number of warehouses
int W = 5;
// number of stores
int S = 10;
// maintenance cost
int C = 30;
// capacity of each warehouse
int[] K = new int[]{1, 4, 2, 1, 3};
// matrix of supply costs, store x warehouse
int[][] P = new int[][]{
    {20, 24, 11, 25, 30},
    {28, 27, 82, 83, 74},
    {74, 97, 71, 96, 70},
    {2, 55, 73, 69, 61},
    {46, 96, 59, 83, 4},
    {42, 22, 29, 67, 59},
    {1, 5, 73, 59, 56},
    {10, 73, 13, 43, 96},
    {93, 35, 63, 85, 46},
    {47, 65, 55, 71, 95}};

// A new model instance
Model model = new Model(&amp;quot;WarehouseLocation&amp;quot;);

// VARIABLES
// a warehouse is either open or closed
BoolVar[] open = model.boolVarArray(&amp;quot;o&amp;quot;, W);
// which warehouse supplies a store
IntVar[] supplier = model.intVarArray(&amp;quot;supplier&amp;quot;, S, 1, W, false);
// supplying cost per store
IntVar[] cost = model.intVarArray(&amp;quot;cost&amp;quot;, S, 1, 96, true);
// Total of all costs
IntVar tot_cost = model.intVar(&amp;quot;tot_cost&amp;quot;, 0, 99999, true);

// CONSTRAINTS
for (int j = 0; j &amp;lt; S; j++) {
    // a warehouse is &#39;open&#39;, if it supplies to a store
    model.element(model.intVar(1), open, supplier[j], 1).post();
    // Compute &#39;cost&#39; for each store
    model.element(cost[j], P[j], supplier[j], 1).post();
}
for (int i = 0; i &amp;lt; W; i++) {
    // additional variable &#39;occ&#39; is created on the fly
    // its domain includes the constraint on capacity
    IntVar occ = model.intVar(&amp;quot;occur_&amp;quot; + i, 0, K[i], true);
    // for-loop starts at 0, warehouse index starts at 1
    // =&amp;gt; we count occurrences of (i+1) in &#39;supplier&#39;
    model.count(i+1, supplier, occ).post();
    // redundant link between &#39;occ&#39; and &#39;open&#39; for better propagation
    occ.ge(open[i]).post();
}
// Prepare the constraint that maintains &#39;tot_cost&#39;
int[] coeffs = new int[W + S];
Arrays.fill(coeffs, 0, W, C);
Arrays.fill(coeffs, W, W + S, 1);
// then post it
model.scalar(ArrayUtils.append(open, cost), coeffs, &amp;quot;=&amp;quot;, tot_cost).post();

model.setObjective(Model.MINIMIZE, tot_cost);
Solver solver = model.getSolver();
solver.setSearch(Search.intVarSearch(
    new VariableSelectorWithTies&amp;lt;&amp;gt;(
        new FirstFail(model),
        new Smallest()),
    new IntDomainMiddle(false),
    ArrayUtils.append(supplier, cost, open))
);
solver.showShortStatistics();
while(solver.solve()){
    prettyPrint(model, open, W, supplier, S, tot_cost);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The best solution found is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Solution #23
    Warehouse 1 supplies customers : 4
    Warehouse 2 supplies customers : 2 6 7 9
    Warehouse 3 supplies customers : 8 10
    Warehouse 5 supplies customers : 1 3 5
    Total C: 383
Model[Model-0], 23 Solutions, Minimize tot_cost = 383, Resolution time 0,069s, 76 Nodes (1Â 098,9 n/s), 93 Backtracks, 26 Fails, 0 Restarts
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;things-to-remember&#34;&gt;Things to remember&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;element&lt;/em&gt; constraint can be very helpful, one can have more
details on it on the &lt;a href=&#34;http://sofdem.github.io/gccat/gccat/Celement.html&#34;&gt;Global Constraint
Catalog&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;count&lt;/em&gt; constraint is also part of the must-have constraints
(&lt;a href=&#34;http://sofdem.github.io/gccat/gccat/Ccount.html&#34;&gt;Global Constraint
Catalog&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Besides pre-defined search strategies, one can also constructed a
specific one. Most of the time, it is worth the time spent on it.&lt;/li&gt;
&lt;li&gt;The resolution process can be unfold and limited. It allows
interacting with solution state without building default solution
object.&lt;/li&gt;
&lt;li&gt;Cut process is managed by the solver, but it can be modified when
using the unfold resolution process.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
